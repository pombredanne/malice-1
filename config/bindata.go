// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x7f\x4b\xe3\x40\x10\xfd\xbf\x9f\x62\x68\xe1\xb8\x03\x1b\x37\x29\x5a\x0d\x88\x88\xe7\xfd\xc2\xde\x81\x0a\x07\xe7\x89\x6c\xb2\xd3\x64\x71\xb3\x1b\x76\x37\x5a\xfd\xf4\x37\xb3\xa9\x8a\x7f\x1e\x98\x96\x6e\x67\xde\xcc\xbc\x37\xb3\x93\x19\x9c\xba\xfe\xd1\xeb\xa6\x8d\xf0\xb1\xfe\x04\x85\xc8\x17\x30\xe7\x63\x1f\x2a\x23\xeb\xbb\xe8\x7a\xf8\xe1\x42\x3b\x48\x58\x49\x6d\x71\x07\x4e\x8c\x81\x0b\x4e\x08\x70\x81\x01\xfd\x3d\xaa\x6c\x32\x83\x4b\x44\x38\xff\x7e\x7a\xf6\xf3\xf2\x0c\xd6\xce\x83\xd1\x35\xda\x80\xa0\x2d\x59\x9d\x8c\xda\xd9\x6c\x32\x99\xbd\xcf\x43\x7c\xab\x13\x66\x23\xf9\x76\xad\x9b\xc1\x27\x02\xf8\xff\x3a\xef\xa4\x67\x12\x75\x34\x08\x47\x30\x5d\x49\xee\x1c\x2e\x06\x1b\x75\x87\x6f\xf5\x4d\x27\x93\x6b\x39\xc4\xd6\xf9\x9b\x09\x80\x95\x5d\xca\x78\x9e\xf3\x94\x7c\x33\x70\xbe\x91\x56\x3f\x8d\xfd\x10\xfa\x55\xc7\x6f\x43\x35\x62\x95\x76\xaf\x2e\x2a\xbd\x76\x83\x55\xe8\xe1\x03\x9c\x9e\xfd\xfa\x6b\xcf\xf5\x1d\x06\x88\x32\x92\x2b\x3a\xba\x1f\x69\x15\x54\x88\x3e\x1b\xd3\x95\xab\x28\x3d\x3f\x5c\x1e\xce\xc5\xde\xbc\x58\x5e\x89\x65\xb9\x28\x4a\x21\xfe\x10\xf8\x45\xfb\x10\xa1\x36\x32\x04\x50\x54\x22\x1c\xc3\xef\xf6\x11\xac\x8b\xc7\xa4\xfa\x01\x2b\x96\x3c\x78\xc3\x02\x44\x96\x3e\xe5\x81\xe0\xc2\x52\x75\xda\xde\x6e\xa1\xbc\x58\x26\x30\x2f\x17\xf4\x70\xc3\xd8\x49\x6d\x38\xb9\x75\x44\x40\x21\xa1\x8b\x7d\x86\x1b\xd9\xf5\x06\xb3\xda\x75\x5c\xa3\x77\x9e\xb1\x62\x8f\x49\x68\xa9\x38\x8e\x4f\x9e\x51\xc2\x59\x16\xf9\xf8\x7c\x70\x5e\x71\x61\x52\x29\x2b\x19\xf0\x26\xe1\xb1\x65\xbc\x4b\xd3\xcf\x54\x1a\x58\x5a\xce\x54\xca\xb8\x5a\x1a\xe6\x9f\x52\xa7\x57\xad\x0e\x40\x5f\xde\x52\x3f\x58\xab\x6d\x03\x34\xeb\xcf\xae\xbe\xa3\x68\xf6\xae\x64\x4d\x7b\x1b\xa2\x34\x26\xdd\x43\xc8\xb6\x12\x59\xc3\x35\x1c\x08\x91\xef\xbc\xfe\x16\xc0\x0a\x6a\x67\x2d\xd6\x1c\x7d\xdb\xc9\x0d\xc5\xed\x09\x21\xc8\x8f\x56\x56\x06\x15\x39\xa2\x1f\x90\xe7\x61\xef\xb5\x77\xb6\x43\x1b\x39\x8f\x14\xb0\x42\x85\xf7\x68\x5c\xcf\xde\xf1\xb2\xb6\xfe\xde\x3b\x35\xd4\xcf\xcb\xa3\x92\x46\x4e\xeb\x64\xdd\xd2\xeb\x38\x7f\x5e\xa2\xb1\xf1\x69\x22\x54\xbd\xd3\x36\x8d\x3a\xd6\x7d\xb9\xbb\xfb\xd2\x7d\x59\x2c\x96\xfb\x1c\x53\x69\xab\xc2\x6b\x5a\xb9\x4b\xe7\x83\xf4\x58\x7a\xc7\x30\x6f\xae\x1b\xb8\x42\x5e\x08\xa2\x35\xae\x69\x46\xda\xb5\x36\xf8\x96\x32\x23\x70\x9a\x04\x6d\x82\x7e\x62\x20\x17\xa3\x29\x1b\xb6\x16\x5b\xab\xa2\x25\x1f\x7a\x26\x5d\x92\x23\x49\x4a\x2f\xc8\x11\xac\xa5\x09\x3c\x18\x6a\x75\xf3\x78\xf3\x32\xb2\x17\x84\x36\x27\xc6\x9e\x19\xa7\xdb\xff\x61\x34\xfe\x05\x00\x00\xff\xff\xf8\xec\x84\x45\xbd\x04\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1213, mode: os.FileMode(420), modTime: time.Unix(1473042805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

